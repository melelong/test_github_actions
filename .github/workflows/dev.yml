# .github/workflows/docker-deploy.yml
name: dev

on:
  push:
    branches:
      - dev

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.10.0]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # 获取包信息
      - name: Get Package Info
        id: getPackageInfo
        run: |
          echo "::set-output name=PackageName::$(node ./scripts/sh/getPackageName.cjs)"
          echo "::set-output name=PackageVersion::$(node ./scripts/sh/getPackageVersion.cjs)"
      - name: DownLoad Docker Image
        id: downLoadDockerImage
        run: |
          docker pull node:iron-alpine3.20
      # 登录docker镜像仓库
      - name: Login to Docker Image Warehouse
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DEV_DOCKER_IMAGE_URL }}
          username: ${{ secrets.DEV_DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.DEV_DOCKER_LOGIN_PASSWORD }}
      # 打包镜像
      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DEV_DOCKER_IMAGE_URL }}/${{ secrets.DEV_DOCKER_IMAGE_URL_NAME }}/${{steps.getPackageInfo.outputs.PackageName}}:${{steps.getPackageInfo.outputs.PackageVersion}}
  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # 获取包信息
      - name: Get Package Info
        id: getPackageInfo
        run: |
          echo "::set-output name=PackageName::$(node ./scripts/sh/getPackageName.cjs)"
          echo "::set-output name=PackageVersion::$(node ./scripts/sh/getPackageVersion.cjs)"
      # 登录docker镜像仓库
      - name: SSH to Cloud Server
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          password: ${{ secrets.DEV_SSH_PW }}
          port: ${{ secrets.DEV_SSH_PORT }}
          script: |
            echo $(ls)
            echo "${{ secrets.DEV_DOCKER_LOGIN_PASSWORD }}" | docker login -u "${{ secrets.DEV_DOCKER_LOGIN_USERNAME }}" --password-stdin "${{ secrets.DEV_DOCKER_IMAGE_URL }}"
            docker pull ${{ secrets.DEV_DOCKER_IMAGE_URL }}/${{ secrets.DEV_DOCKER_IMAGE_URL_NAME }}/${{steps.getPackageInfo.outputs.PackageName}}:${{steps.getPackageInfo.outputs.PackageVersion}}
